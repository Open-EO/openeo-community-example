{
  "description": "Classical Normalized Burnt Ratio(NBR) difference is performed using VITO backend on a chunk polygon.",
  "id": "burntmapping_chunks",
  "links": [
    {
      "href": "https://openeo.vito.be/openeo/1.1/processes/u:ecce9fea04b8c9c76ac76b45b6ba00c20f211bda4856c14aa4475b8e8ed433cd%40egi.eu/burntmapping_chunks",
      "rel": "canonical",
      "title": "Public URL for user-defined process 'burntmapping_chunks'"
    }
  ],
  "parameters": [
    {
      "description": "Left-closed temporal interval, i.e. an array with exactly two elements:The first element is the start of the temporal interval. The specified instance in time is included in the interval.The second element is the end of the temporal interval. The specified instance in time is excluded from the interval.The specified temporal strings follow RFC 3339. Also supports open intervals by setting one of the boundaries to null, but never both.",
      "name": "Previous_date",
      "schema": {
        "subtype": "temporal-interval",
        "type": "array"
      }
    },
    {
      "description": "Left-closed temporal interval, i.e. an array with exactly two elements:The first element is the start of the temporal interval. The specified instance in time is included in the interval.The second element is the end of the temporal interval. The specified instance in time is excluded from the interval.The specified temporal strings follow RFC 3339. Also supports open intervals by setting one of the boundaries to null, but never both.",
      "name": "After_date",
      "schema": {
        "subtype": "temporal-interval",
        "type": "array"
      }
    },
    {
      "description": "Spatial extent for area of interst to calculate NBR, specified as GEOJSON.",
      "name": "aoi",
      "schema": {
        "subtype": "geojson",
        "type": "object"
      }
    }
  ],
  "process_graph": {
    "chunkpolygon1": {
      "arguments": {
        "chunks": {
          "from_parameter": "aoi"
        },
        "data": {
          "from_node": "loadcollection1"
        },
        "process": {
          "process_graph": {
            "runudf1": {
              "arguments": {
                "data": {
                  "from_parameter": "data"
                },
                "runtime": "python",
                "udf": "\nfrom openeo.udf import XarrayDataCube\n\n\ndef apply_datacube(cube: XarrayDataCube, context: dict) -> XarrayDataCube:\n    # access the underlying xarray\n    inarr = cube.get_array()\n\n    # nbr\n    nir = inarr.loc[:,'B08']\n    swir = inarr.loc[:,'B12']\n    nbr = (nir-swir)/(nir+swir)\n    \n    # extend bands dim\n    nbr=nbr.expand_dims(dim='bands', axis=-3).assign_coords(bands=['nbr'])\n    \n    # wrap back to datacube and return\n    return XarrayDataCube(nbr)\n"
              },
              "process_id": "run_udf",
              "result": true
            }
          }
        }
      },
      "process_id": "chunk_polygon"
    },
    "chunkpolygon2": {
      "arguments": {
        "chunks": {
          "from_parameter": "aoi"
        },
        "data": {
          "from_node": "loadcollection2"
        },
        "process": {
          "process_graph": {
            "runudf2": {
              "arguments": {
                "data": {
                  "from_parameter": "data"
                },
                "runtime": "python",
                "udf": "\nfrom openeo.udf import XarrayDataCube\n\n\ndef apply_datacube(cube: XarrayDataCube, context: dict) -> XarrayDataCube:\n    # access the underlying xarray\n    inarr = cube.get_array()\n\n    # nbr\n    nir = inarr.loc[:,'B08']\n    swir = inarr.loc[:,'B12']\n    nbr = (nir-swir)/(nir+swir)\n    \n    # extend bands dim\n    nbr=nbr.expand_dims(dim='bands', axis=-3).assign_coords(bands=['nbr'])\n    \n    # wrap back to datacube and return\n    return XarrayDataCube(nbr)\n"
              },
              "process_id": "run_udf",
              "result": true
            }
          }
        }
      },
      "process_id": "chunk_polygon"
    },
    "loadcollection1": {
      "arguments": {
        "bands": [
          "B08",
          "B12"
        ],
        "id": "SENTINEL2_L1C_SENTINELHUB",
        "spatial_extent": null,
        "temporal_extent": {
          "from_parameter": "After_date"
        }
      },
      "process_id": "load_collection"
    },
    "loadcollection2": {
      "arguments": {
        "bands": [
          "B08",
          "B12"
        ],
        "id": "SENTINEL2_L1C_SENTINELHUB",
        "spatial_extent": null,
        "temporal_extent": {
          "from_parameter": "Previous_date"
        }
      },
      "process_id": "load_collection"
    },
    "mergecubes1": {
      "arguments": {
        "cube1": {
          "from_node": "reducedimension1"
        },
        "cube2": {
          "from_node": "reducedimension2"
        },
        "overlap_resolver": {
          "process_graph": {
            "subtract1": {
              "arguments": {
                "x": {
                  "from_parameter": "x"
                },
                "y": {
                  "from_parameter": "y"
                }
              },
              "process_id": "subtract",
              "result": true
            }
          }
        }
      },
      "process_id": "merge_cubes",
      "result": true
    },
    "reducedimension1": {
      "arguments": {
        "data": {
          "from_node": "chunkpolygon1"
        },
        "dimension": "t",
        "reducer": {
          "process_graph": {
            "mean1": {
              "arguments": {
                "data": {
                  "from_parameter": "data"
                }
              },
              "process_id": "mean",
              "result": true
            }
          }
        }
      },
      "process_id": "reduce_dimension"
    },
    "reducedimension2": {
      "arguments": {
        "data": {
          "from_node": "chunkpolygon2"
        },
        "dimension": "t",
        "reducer": {
          "process_graph": {
            "mean2": {
              "arguments": {
                "data": {
                  "from_parameter": "data"
                }
              },
              "process_id": "mean",
              "result": true
            }
          }
        }
      },
      "process_id": "reduce_dimension"
    }
  },
  "public": true,
  "returns": "Return an RGB image as Geotiff",
  "summary": "Burnt area mapping using chunk_polygon on UDF"
}